import { createClient } from "npm:@supabase/supabase-js@2";

// Configura√ß√µes do Supabase
const supabaseUrl = Deno.env.get("SUPABASE_URL") || "";
const supabaseAnonKey = Deno.env.get("SUPABASE_ANON_KEY") || "";
const supabaseServiceKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") || "";

// Cliente Supabase para usu√°rios e admin
const supabase = createClient(supabaseUrl, supabaseAnonKey);
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey);

// Headers CORS
const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "POST, GET, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization, apikey, x-client-info"
};

// System prompt padr√£o
const DEFAULT_SYSTEM_PROMPT = `# IDENTIDADE E OBJETIVO

Voc√™ √© o "Analista de Funil IA", um especialista s√™nior em Marketing de Performance e Otimiza√ß√£o da Taxa de Convers√£o (CRO). Sua identidade √© a de um consultor preciso, anal√≠tico e focado em resultados.

Sua miss√£o √© analisar a coer√™ncia e a sinergia entre o texto de um an√∫ncio e o texto de uma p√°gina de destino, com o objetivo de identificar pontos de fric√ß√£o e fornecer um diagn√≥stico claro com sugest√µes acion√°veis para maximizar as taxas de convers√£o.

# TAREFA DETALHADA

Execute uma an√°lise passo a passo, comparando o An√∫ncio com a P√°gina de Destino. Sua an√°lise deve cobrir os seguintes pontos cr√≠ticos:

1. Coer√™ncia da Oferta e Mensagem Principal: Verifique se a promessa central (ex: "50% OFF", "Aprenda a criar campanhas") feita no an√∫ncio √© imediatamente vis√≠vel, clara e consistente na p√°gina de destino.

2. Alinhamento do Tom de Voz: Avalie se o estilo de linguagem, formalidade e tom emocional s√£o consistentes entre as duas pe√ßas.

3. Consist√™ncia da Chamada para A√ß√£o (CTA): Compare o CTA do an√∫ncio (ex: "Inscreva-se agora") com o CTA principal da p√°gina de destino. Eles s√£o congruentes e levam ao mesmo objetivo?

4. Identifica√ß√£o de Pontos de Fric√ß√£o: Aponte qualquer quebra de expectativa, mensagem confusa ou informa√ß√£o prometida no an√∫ncio que n√£o √© facilmente encontrada na p√°gina de destino.

# FORMATO DA SA√çDA

Voc√™ deve retornar APENAS um objeto JSON v√°lido no seguinte formato:
{
  "funnelCoherenceScore": [n√∫mero de 0 a 10 representando a pontua√ß√£o de coer√™ncia],
  "adDiagnosis": "Diagn√≥stico detalhado do an√∫ncio analisando proposta de valor, clareza da mensagem, apelo emocional e efic√°cia do CTA. Seja espec√≠fico sobre pontos fortes e fracos.",
  "landingPageDiagnosis": "Diagn√≥stico detalhado da p√°gina de destino analisando consist√™ncia com o an√∫ncio, clareza da informa√ß√£o, facilidade de navega√ß√£o e convers√£o. Identifique gaps e oportunidades.",
  "syncSuggestions": [
    "Sugest√£o espec√≠fica e acion√°vel 1 com prioridade alta - foque em alinhamento de mensagem",
    "Sugest√£o espec√≠fica e acion√°vel 2 com prioridade m√©dia - melhore a consist√™ncia do tom", 
    "Sugest√£o espec√≠fica e acion√°vel 3 com prioridade baixa - otimize elementos de convers√£o",
    "Sugest√£o adicional se necess√°rio para completar a an√°lise"
  ],
  "optimizedAd": "Vers√£o otimizada do an√∫ncio que mant√©m a ess√™ncia original mas melhora a coer√™ncia com a p√°gina de destino e maximiza o potencial de convers√£o. Use linguagem persuasiva e elementos de prova social quando apropriado."
}`;

// Simular resposta para testes
async function generateSimulatedResponse() {
  await new Promise(resolve => setTimeout(resolve, 1500));
  
  const analysis = {
    funnelCoherenceScore: 7.5,
    adDiagnosis: "O an√∫ncio apresenta uma proposta de valor clara, mas poderia enfatizar mais os benef√≠cios espec√≠ficos do produto. A linguagem est√° adequada ao p√∫blico-alvo.",
    landingPageDiagnosis: "A p√°gina de destino cont√©m as informa√ß√µes principais e mant√©m consist√™ncia com o an√∫ncio. A proposta de valor poderia estar mais evidente logo no in√≠cio da p√°gina.",
    syncSuggestions: [
      "Alinhe as palavras-chave principais entre o an√∫ncio e a p√°gina de destino",
      "Mantenha a mesma proposta de valor em ambos os textos",
      "Certifique-se de que a chamada para a√ß√£o no an√∫ncio corresponda ao bot√£o principal da p√°gina",
      "Use linguagem consistente e tom de voz similar em ambos os materiais"
    ],
    optimizedAd: "üöÄ Transforme seu Marketing Digital com nosso Curso Completo! Aprenda Facebook Ads, SEO e estrat√©gias comprovadas que funcionam. 50% OFF apenas hoje - mesma garantia de 30 dias mencionada em nossa p√°gina. Clique agora e comece sua transforma√ß√£o! ‚ú®"
  };
  
  return JSON.stringify(analysis);
}

// Fun√ß√£o principal do servidor
Deno.serve(async (req) => {
  // Lidar com requisi√ß√µes OPTIONS (CORS pre-flight)
  if (req.method === "OPTIONS") {
    return new Response(null, {
      status: 204,
      headers: corsHeaders,
    });
  }

  try {
    // Extrair dados da requisi√ß√£o
    const { adText, landingPageText } = await req.json();
    
    // Validar entrada
    if (!adText || !landingPageText) {
      return new Response(
        JSON.stringify({ error: "Textos de an√∫ncio e p√°gina de destino s√£o obrigat√≥rios" }),
        { status: 400, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    // Verificar autentica√ß√£o
    const authHeader = req.headers.get("Authorization");
    if (!authHeader) {
      return new Response(
        JSON.stringify({ error: "N√£o autorizado" }),
        { status: 401, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    const token = authHeader.replace("Bearer ", "");
    const { data: { user }, error: userError } = await supabase.auth.getUser(token);
    
    if (userError || !user) {
      return new Response(
        JSON.stringify({ error: "Usu√°rio n√£o autenticado" }),
        { status: 401, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    // Verificar permiss√µes (se o usu√°rio pode usar o servi√ßo)
    const { data: usageData, error: usageError } = await supabase.rpc("check_funnel_analysis_usage", {
      user_uuid: user.id
    }).catch(() => ({ data: [{ can_use: true }], error: null }));

    if (usageError || (usageData && usageData[0] && !usageData[0].can_use)) {
      return new Response(
        JSON.stringify({ error: "Voc√™ atingiu o limite de an√°lises do seu plano." }),
        { status: 403, headers: { ...corsHeaders, "Content-Type": "application/json" } }
      );
    }

    // Processar a an√°lise
    // Em uma implementa√ß√£o real, aqui chamar√≠amos o modelo de IA
    // Para simplificar, usamos uma resposta simulada
    const response = await generateSimulatedResponse();
    const analysis = JSON.parse(response);
    
    // Incrementar contador de uso
    try {
      await supabase.rpc("increment_usage_counter", {
        p_user_uuid: user.id,
        p_feature_type: "funnel_analysis"
      });
    } catch (error) {
      console.error("Erro ao incrementar contador:", error);
    }

    // Retornar resultado
    return new Response(
      JSON.stringify(analysis),
      { 
        status: 200, 
        headers: { 
          ...corsHeaders, 
          "Content-Type": "application/json" 
        } 
      }
    );
  } catch (error) {
    // Lidar com erros
    console.error("Erro ao processar requisi√ß√£o:", error);
    return new Response(
      JSON.stringify({ 
        error: "Erro ao processar a an√°lise",
        message: error.message
      }),
      { 
        status: 500, 
        headers: { 
          ...corsHeaders, 
          "Content-Type": "application/json" 
        } 
      }
    );
  }
});